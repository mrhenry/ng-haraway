var module_1 = require('./module');
module_1.mod.directive('harawayChooser', [function () {
        return {
            restrict: 'A',
            scope: {
                modelPath: '@ngModel',
                multiple: '@',
                accept: '@',
                profile: '@',
                autoUpload: '@',
            },
            controller: ['$scope', '$element', function ($scope, $element) {
                    $scope.multiple = $element.attr('multiple');
                    $scope.autoUpload = $element.attr('auto-upload');
                    var Haraway = window['Haraway'];
                    var modelPath = $scope.modelPath;
                    var accept = ($scope.accept || '').split(' ');
                    var multiple = ($scope.multiple === 'true' || $scope.multiple === 'multiple' || $scope.multiple === '');
                    var autoUpload = ($scope.autoUpload === 'true' || $scope.autoUpload === 'auto-upload' || $scope.autoUpload === '');
                    var profile = $scope.profile;
                    if (multiple) {
                        $scope.$parent.$eval(modelPath + ' = ' + modelPath + ' || [];');
                        $scope.files = $scope.$parent.$eval(modelPath);
                    }
                    else {
                        $scope.files = [];
                        var file = $scope.$parent.$eval(modelPath);
                        if (file)
                            $scope.files.push(file);
                    }
                    $scope.$watch('files');
                    $element.on('click', handleClick);
                    $scope.$on('$destroy', function () {
                        $element.off('click', handleClick);
                    });
                    function handleClick(e) {
                        var Haraway = window['Haraway'];
                        e.preventDefault();
                        if (multiple) {
                            Haraway.choose(accept, multiple, profile, handleFiles);
                        }
                        else {
                            Haraway.choose(accept, multiple, profile, handleFile);
                        }
                    }
                    function handleFile(file) {
                        var wrapper = wrapFile($scope.$parent, file);
                        if (autoUpload)
                            wrapper.$upload();
                        $scope.files = [wrapper];
                        $scope.$parent.$evalAsync($scope.modelPath + ' = $harawayFile', { $harawayFile: wrapper });
                        return false;
                    }
                    function handleFiles(file) {
                        var wrapper = wrapFile($scope.$parent, file);
                        if (autoUpload)
                            wrapper.$upload();
                        $scope.$evalAsync(function () {
                            $scope.files.push(wrapper);
                        });
                        return false;
                    }
                }]
        };
    }]);
function wrapFile($scope, file) {
    var wrapper = {
        id: null,
        _destroy: false,
        attributes: {
            file_name: file.name,
        },
        $info: file,
        $upload: file.upload.bind(file),
    };
    file.state = 'pending';
    file.on('queued', function () {
        file.state = 'queued';
        $scope.$digest();
    });
    file.on('busy', function () {
        $scope.$digest();
    });
    file.on('idle', function () {
        $scope.$digest();
    });
    file.on('start', function () {
        file.state = 'uploading';
        $scope.$digest();
    });
    file.on('progress', function () {
        $scope.$digest();
    });
    file.on('err', function (err) {
        file.state = 'failed';
        file.error = err;
        $scope.$digest();
    });
    file.on('done:uploading', function () {
        file.state = 'processing';
        $scope.$digest();
    });
    file.on('done:processing', function () {
        $scope.$digest();
    });
    file.on('done', function () {
        file.state = 'uploaded';
        wrapper.id = file.metadata.id;
        $scope.$digest();
    });
    return wrapper;
}
//# sourceMappingURL=data:application/json;base64,